Assessment Summary
Compilation:  PASSED
Style:        FAILED
Findbugs:     No potential bugs found.
API:          PASSED

Correctness:  21/21 tests passed
Memory:       8/8 tests passed
Timing:       42/42 tests passed

Aggregate score: 100.00% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]
Assessment Details
The following files were submitted:
----------------------------------
total 20K
-rw-r--r-- 1 8.1K Feb 24 20:48 KdTree.java
-rw-r--r-- 1 2.4K Feb 24 20:48 PointSET.java
-rw-r--r-- 1 3.0K Feb 24 20:48 studentSubmission.zip


********************************************************************************
*          COMPILING                                                           *
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

================================================================

% javac KdTree.java
*-----------------------------------------------------------

================================================================



% checkstyle *.java
*-----------------------------------------------------------
PointSET.java:2: Do not use .* in import statements.
PointSET.java:55:44: ',' is not followed by whitespace.
PointSET.java:71:34: ',' is not followed by whitespace.
PointSET.java:72:34: ',' is not followed by whitespace.
PointSET.java:73:34: ',' is not followed by whitespace.
PointSET.java:74:34: ',' is not followed by whitespace.
PointSET.java:75:34: ',' is not followed by whitespace.
KdTree.java:1: Do not use .* in import statements.
KdTree.java:44:37: The local variable or parameter 'point' has the same name as an instance variable. Use a different name.
KdTree.java:120:35: An empty statement might indicate a superfluous semicolon.
Checkstyle ends with 10 errors.

================================================================


% findbugs *.class
*-----------------------------------------------------------

================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


******************************************************************************
*          CORRECTNESS
******************************************************************************

Testing methods in PointSET
*-----------------------------------------------------------
Running 8 total tests.

Test 1: Test size() by inserting N random points
        (size may be less than N because of duplicates)
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==> passed

Test 2: Test isEmpty() by checking for N = 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==> passed

Test 3: Insert N random points and check contains() for random query points
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==> passed

Test 4: Insert N random points and check nearest() for random query points
  *  1000 random points in 100000-by-100000 grid
  *  1000 random points in 10000-by-10000 grid
  *  1000 random points in 1000-by-1000 grid
  *  1000 random points in 100-by-100 grid
  *  1000 random points in 10-by-10 grid
==> passed

Test 5: Insert N random points and check range() for random query rectangles
  *  1000 random rectangles and points in 100000-by-100000 grid
  *  1000 random rectangles and points in 10000-by-10000 grid
  *  1000 random rectangles and points in 1000-by-1000 grid
  *  1000 random rectangles and points in 100-by-100 grid
  *  1000 random rectangles and points in 10-by-10 grid
==> passed

Test 6: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  *  10000 calls in 10000-by-10000 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 1000-by-1000 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 100-by-100 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 10-by-10 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 1-by-1 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==> passed

Test 7: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==> passed

Test 8: Test whether two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================

Testing methods in KdTree
*-----------------------------------------------------------
In the tests below, we consider three classes of points and rectangles.

  *  Distinct points: no two points (or rectangles) share both an
     x-coordinate and a y-coordinate
  *  General points: no restrictions on the x-coordinates or y-coordinates
     of the points (or rectangles)

A point in an M-by-M grid means that it is of the form (i/M, j/M),
where i and j are integers between 0 and M

Running 13 total tests.

Test 1a: Insert N distinct points and check size() after each insertion
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==> passed

Test 1b: Insert N points and check size() after each insertion
  *  100000 random general points in 100000-by-100000 grid
  *  100000 random general points in 10000-by-10000 grid
  *  100000 random general points in 1000-by-1000 grid
  *  100000 random general points in 100-by-100 grid
  *  100000 random general points in 10-by-10 grid
  *  10 random general points in 1-by-1 grid
==> passed

Test 2: Test isEmpty() by checking that it returns the right results for 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==> passed

Test 3a: Insert N distinct points and call contains() with random query points
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==> passed

Test 3b: Insert N points and call contains() with random query points
  *  10000 random general points in 1000-by-1000 grid
  *  10000 random general points in 100-by-100 grid
  *  10000 random general points in 10-by-10 grid
  *  10000 random general points in 1-by-1 grid
==> passed

Test 4: Test whether two KdTree objects can be created at the same time
==> passed

Test 5a: Insert N distinct points and call range() for random query rectangles
  *  4000 random rectangles and 4000 distinct points in 100000-by-100000 grid
  *  4000 random rectangles and 4000 distinct points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 distinct points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 distinct points in 100-by-100 grid
  *  40 random rectangles and 40 distinct points in 10-by-10 grid
  *  1 random rectangles and 1 distinct points in 1-by-1 grid
==> passed

Test 5b: Insert N points and call range() for random query rectangles
  *  4000 random rectangles and 4000 random general points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 random general points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 random general points in 100-by-100 grid
  *  4000 random rectangles and 4000 random general points in 10-by-10 grid
  *  4000 random rectangles and 4000 random general points in 1-by-1 grid
==> passed

Test 5c: Insert N points and call range() for tiny
rectangles enclosing each point.
  *  4000 tiny rectangles and 4000 points in 100000-by-100000 grid
  *  4000 tiny rectangles and 4000 points in 10000-by-10000 grid
  *  4000 tiny rectangles and 4000 points in 1000-by-1000 grid
  *  4000 tiny rectangles and 4000 points in 100-by-100 grid
  *  4000 tiny rectangles and 4000 points in 10-by-10 grid
==> passed

Test 6a: Insert N distinct points and call nearest() with random query points
  *  50000 random general points in 100000-by-100000 grid
  *  50000 random general points in 10000-by-10000 grid
  *  50000 random general points in 1000-by-1000 grid
  *  50000 random general points in 100-by-100 grid
  *  50000 random general points in 10-by-10 grid
==> passed

Test 6b: Insert N points and call nearest() with random query points
  *  10000 random general points in 1000-by-1000 grid
  *  10000 random general points in 100-by-100 grid
  *  10000 random general points in 10-by-10 grid
==> passed

Test 7: test intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  *  20000 calls in 100000-by-100000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10000-by-10000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1000-by-1000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 100-by-100 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10-by-10 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1-by-1 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
==> passed

Test 8: test intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3 = 0, p4, p5, and p6, respectively
        (a data structure with 0 points)
  *  1000 calls in 1000-by-1000 grid with probabilties 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==> passed


Total: 13/13 tests passed!


================================================================

******************************************************************************
*          MEMORY
******************************************************************************

Computing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Computing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          192                160
=> passed        2          328                288
=> passed        5          736                672
=> passed       10         1416               1312
=> passed       25         3456               3232
=> passed      100        13656              12832
=> passed      400        54456              51232
=> passed      800       108856             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 136.00 N + 56.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*          TIMING
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=> passed   160000     934102
=> passed   320000     816541
=> passed   640000     631219
=> passed  1280000     710056
==> 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=> passed   160000     396117
=> passed   320000     391386
=> passed   640000     328917
=> passed  1280000     353006
==> 4/4 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=> passed    10000       3054
=> passed    20000       1450
=> passed    40000        630
==> 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=> passed    10000       3505
=> passed    20000       1658
=> passed    40000        734
==> 3/3 tests passed

Total: 14/14 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000     505654               1.0              23.6              22.6              22.6
=> passed   320000     542708               1.0              24.0              23.0              23.0
=> passed   640000     519778               1.0              25.5              24.5              24.5
=> passed  1280000     440224               1.0              27.6              26.6              26.6
==> 4/4 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     506147              18.5              17.5              36.0
=> passed    20000     532387              19.7              18.7              38.3
=> passed    40000     494290              21.8              20.8              42.6
=> passed    80000     454829              22.0              21.0              43.0
=> passed   160000     395605              23.2              22.2              45.5
=> passed   320000     361731              25.0              24.0              49.1
=> passed   640000     316007              25.7              24.7              50.4
=> passed  1280000     323680              27.2              26.2              53.4
==> 8/8 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     209760              31.1              31.1              94.6              53.9
=> passed    20000     223507              32.6              32.6              97.7              62.0
=> passed    40000     182440              39.3              39.3             119.3              67.5
=> passed    80000     170662              40.7              40.7             123.1              70.4
=> passed   160000     103232              42.5              42.5             128.6              81.1
=> passed   320000     103520              40.2              40.2             121.7              71.7
=> passed   640000     107925              43.3              43.3             130.1              80.7
=> passed  1280000      75326              47.0              47.0             143.2              77.6
==> 8/8 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> passed    10000   256039                  24.8                   40.5                   113.5             112.1
=> passed    20000   256634                  27.2                   44.8                   125.1             124.0
=> passed    40000   202997                  31.9                   53.1                   149.0             146.4
=> passed    80000   292117                  32.5                   54.4                   150.5             150.9
=> passed   160000   172425                  35.2                   59.3                   165.2             164.1
=> passed   320000   124010                  36.7                   62.1                   172.3             171.1
=> passed   640000    97442                  38.1                   64.4                   178.1             177.7
=> passed  1280000    70218                  42.5                   72.4                   200.7             198.4
==> 8/8 tests passed

Total: 28/28 tests passed!

================================================================
